const TelegramBot = require('node-telegram-bot-api');
const {BOT_TOKEN} = process.env;
const bot = new TelegramBot(BOT_TOKEN, {polling: true});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userData = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const BOT_STATES = {
    AWAITING_START_WEIGHT: 'awaiting_start_weight',
    AWAITING_END_WEIGHT: 'awaiting_end_weight',
    AWAITING_PROTEIN: 'awaiting_protein',
    AWAITING_FAT: 'awaiting_fat',
    AWAITING_CARBS: 'awaiting_carbs',
    READY_FOR_CALCULATION: 'ready_for_calculation',
    EDITING_PARAMETER: 'editing_parameter'
};

const startWeightValidation = (value) => {–í–í
    const isNotValid = isNaN(value) || value <= 0 || value > 10_000;
    if (isNotValid) {
        return '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 1 –¥–æ 10000 –≥—Ä–∞–º–º):';
    }
};

const endWeightValidation = (value) => {
    const isNotValid = isNaN(value) || value <= 0 || value > 100_000;
    if (isNotValid) {
        return '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 1 –¥–æ 100000 –≥—Ä–∞–º–º):';
    }
};

const pfcValidation = (value, chatId, param) => {
    const paramMap = {
        'protein': '–±–µ–ª–∫–æ–≤',
        'fat': '–∂–∏—Ä–æ–≤',
        'carbs': '—É–≥–ª–µ–≤–æ–¥–æ–≤',
    }
    const isNotValid = isNaN(value) || value < 0 || value > 100;
    if (isNotValid) {
        return `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${paramMap[param]} (0-100 –≥ –Ω–∞ 100–≥ –ø—Ä–æ–¥—É–∫—Ç–∞):`;
    }
    const user = userData.get(chatId);
    const pfc = ['protein', 'fat', 'carbs'].filter(el => el != param);
    if (pfc.reduce((acc, el) => acc + user[el], value) > 100) {
        return '‚ùå –°—É–º–º–∞ –ë–ñ–£ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100';
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–µ—Å–∞
const handleStartWeightInput = (chatId, text) => {
    const weight = parseFloat(text.replace(',', '.'));

    const errorMessage = startWeightValidation(weight);
    if (errorMessage) {
        bot.sendMessage(chatId, errorMessage);
        return;
    }

    const user = userData.get(chatId);
    user.startWeight = weight;
    user.state = BOT_STATES.AWAITING_END_WEIGHT;
    userData.set(chatId, user);

    bot.sendMessage(chatId, `‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å: ${weight} –≥\n\nüìâ –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö:`);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Å–∞
const handleEndWeightInput = (chatId, text) => {
    const weight = parseFloat(text.replace(',', '.'));

    const errorMessage = endWeightValidation(weight);
    if (errorMessage) {
        bot.sendMessage(chatId, errorMessage);
        return;
    }

    const user = userData.get(chatId);
    user.endWeight = weight;
    user.state = BOT_STATES.AWAITING_PROTEIN;
    userData.set(chatId, user);

    const changePercentage = ((user.startWeight - weight) / user.startWeight * 100).toFixed(1);

    bot.sendMessage(chatId,
        `‚úÖ –í–µ—Å –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: ${weight} –≥\n` +
        `üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: ${changePercentage > 1 ? changePercentage : changePercentage * -1}%\n\n` +
        `ü•© –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ë–ï–õ–ö–û–í –≤ 100–≥ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥):`);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–ª–∫–æ–≤
const handleProteinInput = (chatId, text) => {
    const protein = parseFloat(text.replace(',', '.'));

    const errorMessage = pfcValidation(protein, chatId, 'protein');
    if (errorMessage) {
        bot.sendMessage(chatId, errorMessage);
        return;
    }

    const user = userData.get(chatId);
    user.protein = protein;
    user.state = BOT_STATES.AWAITING_FAT;
    userData.set(chatId, user);

    bot.sendMessage(chatId, `‚úÖ –ë–µ–ª–∫–∏: ${protein} –≥/100–≥\n\nü•ì –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ñ–ò–†–û–í –≤ 100–≥ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥):`);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∏—Ä–æ–≤
const handleFatInput = (chatId, text) => {
    const fat = parseFloat(text.replace(',', '.'));

    const errorMessage = pfcValidation(fat, chatId, 'fat');
    if (errorMessage) {
        bot.sendMessage(chatId, errorMessage);
        return;
    }

    const user = userData.get(chatId);
    user.fat = fat;
    user.state = BOT_STATES.AWAITING_CARBS;
    userData.set(chatId, user);

    bot.sendMessage(chatId, `‚úÖ –ñ–∏—Ä—ã: ${fat} –≥/100–≥\n\nüçö –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –£–ì–õ–ï–í–û–î–û–í –≤ 100–≥ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥):`);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤
const handleCarbsInput = (chatId, text) => {
    const carbs = parseFloat(text.replace(',', '.'));

    const errorMessage = pfcValidation(carbs, chatId, 'carbs');
    if (errorMessage) {
        bot.sendMessage(chatId, errorMessage);
        return;
    }

    const user = userData.get(chatId);
    user.carbs = carbs;
    user.state = BOT_STATES.READY_FOR_CALCULATION;
    userData.set(chatId, user);

    showSummary(chatId);
};

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
const showSummary = (chatId) => {
    const user = userData.get(chatId);

    const summary = `üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n` +
        `‚öñÔ∏è –ò—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å: ${user.startWeight} –≥\n` +
        `‚öñÔ∏è –í–µ—Å –≥–æ—Ç–æ–≤–æ–≥–æ: ${user.endWeight} –≥\n` +
        `ü•© –ë–µ–ª–∫–∏: ${user.protein} –≥/100–≥\n` +
        `ü•ì –ñ–∏—Ä—ã: ${user.fat} –≥/100–≥\n` +
        `üçö –£–≥–ª–µ–≤–æ–¥—ã: ${user.carbs} –≥/100–≥\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£', callback_data: 'calculate_kbju' }],
                [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'edit_data' }]
            ]
        }
    };

    bot.sendMessage(chatId, summary, keyboard);
};

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const showEditKeyboard = (chatId) => {
    const user = userData.get(chatId);

    const editText = `üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: `‚öñÔ∏è –ò—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å (${user.startWeight}–≥)`, callback_data: 'edit_start_weight' },
                    { text: `‚öñÔ∏è –í–µ—Å –≥–æ—Ç–æ–≤–æ–≥–æ (${user.endWeight}–≥)`, callback_data: 'edit_end_weight' }
                ],
                [
                    { text: `ü•© –ë–µ–ª–∫–∏ (${user.protein}–≥)`, callback_data: 'edit_protein' },
                    { text: `ü•ì –ñ–∏—Ä—ã (${user.fat}–≥)`, callback_data: 'edit_fat' }
                ],
                [
                    { text: `üçö –£–≥–ª–µ–≤–æ–¥—ã (${user.carbs}–≥)`, callback_data: 'edit_carbs' }
                ],
                [
                    { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'finish_editing' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, editText, keyboard);
};

// –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
const startParameterEdit = (chatId, param, description) => {
    const user = userData.get(chatId);
    user.state = BOT_STATES.EDITING_PARAMETER;
    user.editingParam = param;
    userData.set(chatId, user);

    let currentValue = '';
    switch (param) {
        case 'start_weight': currentValue = user.startWeight; break;
        case 'end_weight': currentValue = user.endWeight; break;
        case 'protein': currentValue = user.protein; break;
        case 'fat': currentValue = user.fat; break;
        case 'carbs': currentValue = user.carbs; break;
    }

    const message = `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞\n\n` +
        `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentValue}\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${description}:`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'back_to_edit' }]
            ]
        }
    };

    bot.sendMessage(chatId, message, keyboard);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
const handleParameterEdit = (chatId, text, param) => {
    const value = parseFloat(text.replace(',', '.'));
    const user = userData.get(chatId);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    let errorMessage = '';

    switch (param) {
        case 'start_weight':
            errorMessage = startWeightValidation(value);
            break;
        case 'end_weight':
            errorMessage = endWeightValidation(value);
            break;
        case 'protein':
        case 'fat':
        case 'carbs':
            errorMessage = pfcValidation(value, chatId, param);
            break;
    }

    if (errorMessage) {
        bot.sendMessage(chatId, errorMessage);
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    switch (param) {
        case 'start_weight': user.startWeight = value; break;
        case 'end_weight': user.endWeight = value; break;
        case 'protein': user.protein = value; break;
        case 'fat': user.fat = value; break;
        case 'carbs': user.carbs = value; break;
    }

    user.state = BOT_STATES.READY_FOR_CALCULATION;
    delete user.editingParam;
    userData.set(chatId, user);

    bot.sendMessage(chatId, `‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
    showSummary(chatId);
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
const calculateKBJU = (chatId) => {
    const user = userData.get(chatId);

    if (!user) {
        bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
        return;
    }

    // –†–∞—Å—á–µ—Ç –ø–æ –≤–∞—à–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
    const density = Number((user.startWeight / user.endWeight).toFixed(2));
    const PFC = [user.protein, user.fat, user.carbs];
    const [newPP100, newFP100, newCP100] = PFC.map(el => Number((el * density).toFixed(1)));

    const caloriesPer100g = Number((newPP100 * 4 + newFP100 * 9 + newCP100 * 4).toFixed(1));
    const totalCalories = Number((caloriesPer100g * user.endWeight / 100).toFixed(1));

    // –†–∞—Å—á–µ—Ç –¥–ª—è –≤—Å–µ–≥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const totalProtein = Number((newPP100 * user.endWeight / 100).toFixed(1));
    const totalFat = Number((newFP100 * user.endWeight / 100).toFixed(1));
    const totalCarbs = Number((newCP100 * user.endWeight / 100).toFixed(1));

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = `üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê –ö–ë–ñ–£\n\n` +
        `üîπ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ${density > 1 ? '—É–≤–∞—Ä–∫–∏/—É–∂–∞—Ä–∫–∏' : '–ø–æ–≥–ª–æ—â–µ–Ω–∏—è'}: ${density}x\n\n` +
        `üìà –ù–∞ 100–≥ –ì–û–¢–û–í–û–ì–û –ø—Ä–æ–¥—É–∫—Ç–∞:\n` +
        `ü•© –ë–µ–ª–∫–∏: ${newPP100} –≥\n` +
        `ü•ì –ñ–∏—Ä—ã: ${newFP100} –≥\n` +
        `üçö –£–≥–ª–µ–≤–æ–¥—ã: ${newCP100} –≥\n` +
        `üî• –ö–∞–ª–æ—Ä–∏–∏: ${caloriesPer100g} –∫–∫–∞–ª\n\n` +
        `üì¶ –ù–∞ –≤—Å—é –ø–æ—Ä—Ü–∏—é (${user.endWeight}–≥):\n` +
        `ü•© –ë–µ–ª–∫–∏: ${totalProtein} –≥\n` +
        `ü•ì –ñ–∏—Ä—ã: ${totalFat} –≥\n` +
        `üçö –£–≥–ª–µ–≤–æ–¥—ã: ${totalCarbs} –≥\n` +
        `üî• –ö–∞–ª–æ—Ä–∏–∏: ${totalCalories} –∫–∫–∞–ª`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìã –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞', callback_data: 'show_details' }],
                [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'edit_data' }],
                [{ text: 'üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', callback_data: 'new_calculation' }]
            ]
        }
    };

    bot.sendMessage(chatId, report, keyboard);
};

// –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
const showDetailedCalculation = (chatId) => {
    const user = userData.get(chatId);
    const density = Number((user.startWeight / user.endWeight).toFixed(2));

    const details = `üîç –î–ï–¢–ê–õ–ò –†–ê–°–ß–ï–¢–ê:\n\n` +
        `üìê –§–æ—Ä–º—É–ª–∞: (–ò—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å / –í–µ—Å –≥–æ—Ç–æ–≤–æ–≥–æ) * –ö–ë–ñ–£ –Ω–∞ 100–≥\n\n` +
        `üìä –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞:\n` +
        `${user.startWeight}–≥ / ${user.endWeight}–≥ = ${density}\n\n` +
        `üßÆ –†–∞—Å—á–µ—Ç –Ω–∞ 100–≥ –≥–æ—Ç–æ–≤–æ–≥–æ:\n` +
        `–ë–µ–ª–∫–∏: ${user.protein}–≥ √ó ${density} = ${(user.protein * density).toFixed(1)}–≥\n` +
        `–ñ–∏—Ä—ã: ${user.fat}–≥ √ó ${density} = ${(user.fat * density).toFixed(1)}–≥\n` +
        `–£–≥–ª–µ–≤–æ–¥—ã: ${user.carbs}–≥ √ó ${density} = ${(user.carbs * density).toFixed(1)}–≥`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', callback_data: 'calculate_kbju' }],
                [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'edit_data' }]
            ]
        }
    };

    bot.sendMessage(chatId, details, keyboard);
};

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
const restartProcess = (chatId) => {
    userData.delete(chatId);
    bot.sendMessage(chatId, 'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
};


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const user = userData.get(chatId);

    switch (data) {
        case 'calculate_kbju':
            calculateKBJU(chatId);
            break;
        case 'edit_data':
            showEditKeyboard(chatId);
            break;
        case 'finish_editing':
            user.state = BOT_STATES.READY_FOR_CALCULATION;
            userData.set(chatId, user);
            showSummary(chatId);
            break;
        case 'edit_start_weight':
            startParameterEdit(chatId, 'start_weight', '–∏—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö');
            break;
        case 'edit_end_weight':
            startParameterEdit(chatId, 'end_weight', '–≤–µ—Å –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö');
            break;
        case 'edit_protein':
            startParameterEdit(chatId, 'protein', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–æ–≤ –≤ 100–≥ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥)');
            break;
        case 'edit_fat':
            startParameterEdit(chatId, 'fat', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤ –≤ 100–≥ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥)');
            break;
        case 'edit_carbs':
            startParameterEdit(chatId, 'carbs', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ 100–≥ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥)');
            break;
        case 'new_calculation':
            restartProcess(chatId);
            break;
        case 'show_details':
            showDetailedCalculation(chatId);
            break;
        case 'back_to_edit':
            showEditKeyboard(chatId);
            break;
    }

    bot.answerCallbackQuery(callbackQuery.id);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;

    userData.set(chatId, {
        state: BOT_STATES.AWAITING_START_WEIGHT,
        startWeight: 0,
        endWeight: 0,
        protein: 0,
        fat: 0,
        carbs: 0
    });

    const welcomeText = `üî¨ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ö–ë–ñ–£ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n\n` +
        `–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞ —Å —É—á–µ—Ç–æ–º —É–≤–∞—Ä–∫–∏/—É–∂–∞—Ä–∫–∏.\n\n` +
        `üìä –í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö:`;

    
    console.log('–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º: ', chatId);
    bot.sendMessage(chatId, welcomeText);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text.startsWith('/') && text !== '/start') return;

    const user = userData.get(chatId);
    if (!user) return;

    switch (user.state) {
        case BOT_STATES.AWAITING_START_WEIGHT:
            handleStartWeightInput(chatId, text);
            break;
        case BOT_STATES.AWAITING_END_WEIGHT:
            handleEndWeightInput(chatId, text);
            break;
        case BOT_STATES.AWAITING_PROTEIN:
            handleProteinInput(chatId, text);
            break;
        case BOT_STATES.AWAITING_FAT:
            handleFatInput(chatId, text);
            break;
        case BOT_STATES.AWAITING_CARBS:
            handleCarbsInput(chatId, text);
            break;
        case BOT_STATES.EDITING_PARAMETER:
            handleParameterEdit(chatId, text, user.editingParam);
            break;
        case BOT_STATES.READY_FOR_CALCULATION:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            break;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.log(`[polling_error] ${error.code}: ${error.message}`);
});

console.log('üî¨ –ë–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—É—â–µ–Ω!');